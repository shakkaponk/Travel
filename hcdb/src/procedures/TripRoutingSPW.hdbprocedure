PROCEDURE "TRIPROUTINGSPW" (IN weight VARCHAR(10), IN AIRPORTCODEORIGIN NVARCHAR(3), IN AIRPORTCODEDESTINATION NVARCHAR(3), OUT TOTALSEGMENTS BigInt, OUT TOTALDISTANCE Int, OUT TOTALDURATION Int, OUT ROUTING "TRIPROUTING")
   LANGUAGE GRAPH
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   READS SQL DATA AS
BEGIN
	Graph g = Graph("FLIGHTS");
	Vertex sourceVertex = Vertex(:g, :AIRPORTCODEORIGIN);
	Vertex targetVertex = Vertex(:g, :AIRPORTCODEDESTINATION);
	IF (:weight == 'DISTANCE') {
		WeightedPath<Int> p = SHORTEST_PATH(:g, :sourceVertex, :targetVertex, (Edge e) => Int {return :e."DISTANCE";});
		TOTALSEGMENTS = Length(:p);
		TOTALDISTANCE = Weight(:p);
		FOREACH e IN Edges(:p) {
			TOTALDURATION = :TOTALDURATION + :e."DURATION";
		}	
		routing = SELECT :SEGMENT, :e."AIRPORTCODEORIGIN",  :e."AIRPORTCODEDESTINATION", :e."AIRLINENAME", :e."DISTANCE", :e."DURATION" FOREACH e in Edges(:p) WITH ORDINALITY AS SEGMENT;
	} ELSE {
		IF (:weight == 'DURATION') {
			WeightedPath<Int> p = SHORTEST_PATH(:g, :sourceVertex, :targetVertex, (Edge e) => Int {return :e."DURATION";});
			TOTALSEGMENTS = Length(:p);
			TOTALDURATION = Weight(:p);
			FOREACH e IN Edges(:p) {
				TOTALDISTANCE = :TOTALDISTANCE + :e."DISTANCE";
			}
			routing = SELECT :SEGMENT, :e."AIRPORTCODEORIGIN",  :e."AIRPORTCODEDESTINATION", :e."AIRLINENAME", :e."DISTANCE", :e."DURATION" FOREACH e in Edges(:p) WITH ORDINALITY AS SEGMENT;
		} ELSE {
			WeightedPath<BigInt> p = SHORTEST_PATH(:g, :sourceVertex, :targetVertex);
			TOTALSEGMENTS = Length(:p);
			FOREACH e IN Edges(:p) {
				TOTALDISTANCE = :TOTALDISTANCE + :e."DISTANCE";
				TOTALDURATION = :TOTALDURATION + :e."DURATION";
			}
			routing = SELECT :SEGMENT, :e."AIRPORTCODEORIGIN",  :e."AIRPORTCODEDESTINATION", :e."AIRLINENAME", :e."DISTANCE", :e."DURATION" FOREACH e in Edges(:p) WITH ORDINALITY AS SEGMENT;
		}
	}
END